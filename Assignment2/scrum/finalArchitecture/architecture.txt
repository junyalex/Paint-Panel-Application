# Architecture

# MVC
# ModelClasses
	Paint , PaintModel, Shape, Circle, Oval, Rectangle, Triangle, Polyline,
	Scribble, Point

# ViewClasses
	PaintPanel,
# ControllerClasses
	ColorEventHandler, FillStyleEventHandler, redoEventHandler, undoEventHandler


# (other logical  ways of collecting your classes)

# Design Patterns Used (collections of classes into DP)
--------------------------------------------------------------------------------
Name: Hojun Lee
Pattern Name: Strategy
Reference:
	https://www.oodesign.com/strategy-pattern/
Purpose:
       - SRP : Used strategy pattern to separates Shape and codes for drawing.
       Shape only contains the information of the object shape, and shape does not know
       how they are being drawn by users.
       - Open-Closed Principle (OCP) : New shapes can be added easily.
       For example, if programmer wants to add new shape like star, they only need to
       implement the StarDrawStrategy.
       - DIP : Shape only depends on DrawStrategy interface , instead of concrete strategies.
UML:
	(include a UML or refer to one included in the finalArchitecture directory)
	(make it easy on us, and organize the diagram so that it looks like the
	reference pattern).

Classes:
	- Context: Shape
    - Strategy: DrawStrategy
    - ConcreteStrategies:
      - CircleDrawStrategy
      - OvalDrawStrategy
      - RectangleDrawStrategy
      - TriangleDrawStrategy
      - PolylineDrawStrategy
      - ScribbleDrawStrategy
      - SquareDrawStrategy


Usage:
	By using strategy pattern, drawing methods are separated for each shapes in different
	classes which makes the code precise, and allows programmers to add new drawing strategy.
--------------------------------------------------------------------------------
Name: Hojun Lee
Pattern Name: Factory
Reference:
	http://www.oodesign.com/factory-pattern.html
Purpose:
	SRP : ShapeFactory class has the single responsibility of creating Strategy objects for drawing			needed for the draw.
	OCP : By using factory pattern, new strategy of a shape class can be added
		without modifying PaintPanel class. Before factory pattern was used, there 			were 	if statements for every shapes selected, but by using factory pattern, 			code 	became concise.


UML:
	(include a UML or refer to one included in the finalArchitecture directory)
	(make it easy on us, and organize the diagram so that it looks like the
	reference pattern).

Classes:

	Factory :
	-ShapeFactory
	Client:
	-PaintPanel

	Product:
	-DrawStrategy

	Concrete Product :
      - CircleDrawStrategy
      - OvalDrawStrategy
      - RectangleDrawStrategy
      - TriangleDrawStrategy
      - PolylineDrawStrategy
      - ScribbleDrawStrategy
      - SquareDrawStrategy



Usage:
	By using Factory pattern, when there is new strategy class to be added,
	it allows us to simply add new strategy class to factory class without modifying
        the PaintPanel class.
--------------------------------------------------------------------------------
Name: Hojun Lee
Pattern Name: Command Pattern
Reference:
	https://www.oodesign.com/command-pattern
Purpose:
	SRP : Each command class has a single responsibility of
	handling execution, undo, and redo operations.
	OCP  : New type of commands can be added by creating new concrete command class.
UML:
	(include a UML or refer to one included in the finalArchitecture directory)
	(make it easy on us, and organize the diagram so that it looks like the
	reference pattern).

Classes:
	Command - Command

	Invoker - PaintModel, UndoRedoPanel

ConcreteCommand
- DrawCircleCommand
- DrawOvalCommand
- DrawPolylineCommand
- DrawRectangleCommand
- DrawScribbleCommand
- DrawSquareCommand
- DrawTriangleCommand
- MoveShapeCommand


Receiver
- Shape
- PaintModel

Client
- DrawStrategy

Usage:
	In order to create a sequence of commands that are executed by users, command
	pattern is used. Also, it allows us to implement undo / redo function by using
	command pattern.

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------

# High Level Architecture Discussion

	(Put all of the above together in a collection of stories which tell the
	developer how to modify, extend, or understand your code)

	(For each story, pull from and modify the highLevelTemplate.txt)

