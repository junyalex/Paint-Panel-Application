# Architecture

# MVC
# ModelClasses
	Paint , PaintModel, Shape, Circle, Oval, Rectangle, Triangle, Polyline,
	Scribble, Point

# ViewClasses
	PaintPanel,
# ControllerClasses
	ColorEventHandler, FillStyleEventHandler, redoEventHandler, undoEventHandler


# (other logical  ways of collecting your classes)

# Design Patterns Used (collections of classes into DP)
--------------------------------------------------------------------------------
Name: Hojun Lee
Pattern Name: Strategy
Reference:
	https://en.wikipedia.org/wiki/Strategy_pattern
Purpose:
       - SRP : Used strategy pattern to separates Shape and codes for drawing.
       Shape only contains the information of the object shape, and shape does not know
       how they are being drawn by users.
       - Open-Closed Principle (OCP) : New shapes can be added easily.
       For example, if programmer wants to add new shape like star, they only need to
       implement the StarDrawStrategy.
       - DIP : Shape only depends on DrawStrategy interface , instead of concrete strategies.
UML:
	(include a UML or refer to one included in the finalArchitecture directory)
	(make it easy on us, and organize the diagram so that it looks like the
	reference pattern).

Classes:
	- Context: Shape
    - Strategy: DrawStrategy
    - ConcreteStrategies:
      - CircleDrawStrategy
      - OvalDrawStrategy
      - RectangleDrawStrategy
      - TriangleDrawStrategy
      - PolylineDrawStrategy
      - ScribbleDrawStrategy
      - SquareDrawStrategy

Usage:
	By using strategy pattern, drawing methods are separated for each shapes in different
	classes which makes the code precise, and allows programmers to add new drawing strategy.

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

# High Level Architecture Discussion

	(Put all of the above together in a collection of stories which tell the
	developer how to modify, extend, or understand your code)

	(For each story, pull from and modify the highLevelTemplate.txt)

