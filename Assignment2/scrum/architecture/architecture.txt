# Please discuss your architectural decisions below.

High Level Architecture:

	MVC
	To keep the code simple, a partial MVC was implemented.
	
	Model
	The Model captures enough information to re-draw the sketch of
	the user.
	
	View+Controller
	There is a View class as well as a few, what we call, view components.
	The View class containing the BorderPane as well as containing all of its components.
	View components are meant to be contained in the main View.
	Examples of view components are PaintPanel and ShapeChooserPanel.
	
	The View class, and view components all implements their own controller.
	For example, the PaintPanel listens to its own MouseEvents.
	This is instead of separating out the Controller from the View. This choice
	was made to simplify the code, yet still keep it modular and clear.
	
	Each view component can see the containing View as well as the Model
	as appropriate. This means that each view component can speak to the
	other view components. An example of this is when the ShapeChooserPanel
	buttons are clicked, resulting in a mode change in the PaintPanel.
	
---------------------------------------------------------------------
TODO!!! Add in more architecture and discussion. For example, 
do you do something interesting to fix the association between the 
ShapeChooser and the PaintPanel? How about the PaintModel, something
is clearly wrong with it. Can you come up with a better architecture?

1. Using Strategy Pattern
Each shape can have its own drawing logic. Therefore, using Strategy
pattern for each drawing mode, we can switch drawing
modes dynamically based on user input. Moreover, we can switch modes
without modifying the PainPanel. Thus, this can be one of the
ways to fix the association between the ShapeChooser and the PainPanel.

2.Observer pattern
We could have the Shapechooser be an Observable and the Paintpanel be an observer.
This  will ensure that changes to the list of shapes are automatically reflected on the canvas.
This pattern allows for observers to be decoupled from the subject.
---------------------------------------------------------------------

DESIGN PATTERNS USED
	TODO!!! If you introduce a Design Pattern to solve a problem, 
	discuss it below. Only add design patterns if they simplify and improve
	the code. I see at least two that would greatly improve code. 
		
	Strategy: Create DrawingStrategy interface for drawing each shapes
	Command: We can use command design pattern in order to implement undo / redo functions
	Singleton:
	Composite:
	Factory: We can use factory design pattern to create shapes.
	Builder:
	Observer/Observable: We can use the Observable to track when
	new shapes are added or modified.
	... (any others you find useful) ...

OTHER ARCHITECTURE DISCUSSIONS
